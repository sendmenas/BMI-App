{"version":3,"sources":["components/App/types.ts","components/InputWrapper/InputWrapper.tsx","heplers/helpers.ts","components/ValuesTable/ValuesTable.tsx","components/App/App.tsx","index.tsx"],"names":["System","InputWrapper","name","type","label","value","hasSubmit","onChange","onNext","onBack","className","htmlFor","id","onClick","storageKey","getWeight","system","Metric","getHeight","ValuesTable","weight","height","initialValues","App","useState","step","setStep","message","setMessage","time","setTime","useEffect","Date","now","count","window","localStorage","getItem","updatedCount","parseInt","toString","setItem","updateVisitCounter","handleNext","handleBack","logData","seconds","console","table","toFixed","Visits","isFirstStep","isSecondStep","isThirdStep","isFinished","onSubmit","vals","actions","setSubmitting","bmi","Math","pow","calculateBmi","status","Map","get","visitor","length","getMessage","values","handleChange","component","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef1f6ea5.chunk.js","sourcesContent":["export enum System {\r\n  Metric = \"metric\",\r\n  Imperial = \"imperial\",\r\n}\r\n\r\nexport type FormVals = {\r\n  system: System;\r\n  name: string;\r\n  height: number;\r\n  weight: number;\r\n};\r\n","import { ChangeEvent } from \"react\";\r\nimport \"./InputWrapper.css\";\r\n\r\ntype Props = {\r\n  name: string;\r\n  type: \"number\" | \"text\";\r\n  label: string;\r\n  value: string | number;\r\n  hasSubmit?: boolean;\r\n  onChange: (e: ChangeEvent<any>) => void;\r\n  onNext?: (() => void) | ((vals: any) => void);\r\n  onBack?: () => void;\r\n};\r\n\r\nexport const InputWrapper: React.FC<Props> = ({\r\n  name,\r\n  type,\r\n  label,\r\n  value,\r\n  hasSubmit = false,\r\n  onChange,\r\n  onNext,\r\n  onBack,\r\n}) => (\r\n  <div className=\"input-wrapper\">\r\n    <label htmlFor={name}>{label}</label>\r\n    <input\r\n      className=\"input-wrapper__input\"\r\n      id={name}\r\n      type={type}\r\n      name={name}\r\n      onChange={onChange}\r\n      value={value}\r\n    />\r\n    <div className=\"cta-block\">\r\n      {onBack && (\r\n        <button onClick={onBack} type=\"button\" className=\"cta-block__back\">\r\n          Back\r\n        </button>\r\n      )}\r\n      {onNext && (\r\n        <button\r\n          onClick={onNext}\r\n          type={hasSubmit ? \"submit\" : \"button\"}\r\n          className=\"cta-block__next\"\r\n        >\r\n          Next\r\n        </button>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n","import { System } from \"../components/App\";\r\n\r\nconst storageKey = \"count\";\r\n\r\n/* Naidota formulė, kartu su \"nuosprendžiu\", yra paimta iš WHO puslapio. Tai šia vietą galima praplėsti taikant ją pagal atskirų šalių metodikas */\r\nexport const calculateBmi = (\r\n  height: number,\r\n  weight: number,\r\n  system: System = System.Metric\r\n): number => {\r\n  if (system === System.Metric) {\r\n    return (weight / Math.pow(height / 100, 2)) | 0;\r\n  }\r\n  return ((weight * 703) / Math.pow(height, 2)) | 0;\r\n};\r\n\r\nexport const getMessage = (name: string, bmi: number): string => {\r\n  const statusMap = new Map([\r\n    [bmi < 18.5, \"Underweight\"],\r\n    [bmi >= 18.5 && bmi <= 24.9, \"Normal weight\"],\r\n    [bmi >= 25.0 && bmi <= 29.9, \"Pre-obesity\"],\r\n    [bmi >= 30.0 && bmi <= 34.9, \"Obesity class I\"],\r\n    [bmi >= 35.0 && bmi <= 39.9, \"Obesity class II\"],\r\n    [bmi > 40, \"Obesity class III\"],\r\n  ]);\r\n  const status = statusMap.get(true);\r\n  const visitor = name.length > 0 ? name : \"Stranger\";\r\n\r\n  return `${visitor}, your BMI is ${bmi.toFixed(2)} - ${status}`;\r\n};\r\n\r\nexport const getTimeString = (seconds: number): string =>\r\n  seconds <= 60\r\n    ? `${seconds.toFixed()}s`\r\n    : `${(seconds / 60).toFixed()}min ${(seconds % 60).toFixed()}s`;\r\n\r\nexport const updateVisitCounter = () => {\r\n  const count = window.localStorage.getItem(storageKey);\r\n  if (!count) {\r\n    window.localStorage.setItem(storageKey, \"1\");\r\n    return;\r\n  }\r\n  const updatedCount = (parseInt(count) + 1).toString();\r\n  window.localStorage.setItem(storageKey, updatedCount);\r\n};\r\n\r\nexport const getCount = () => window.localStorage.getItem(storageKey);\r\n\r\nexport const getWeight = (system: System) =>\r\n  system === System.Metric ? \"kg\" : \"lbs\";\r\n\r\nexport const getHeight = (system: System) =>\r\n  system === System.Metric ? \"cm\" : \"inches\";\r\n","import { getHeight, getWeight } from \"../../heplers\";\r\nimport { FormVals } from \"../App\";\r\nimport \"./ValuesTable.css\";\r\n\r\nexport const ValuesTable: React.FC<FormVals> = ({ weight, height, system }) => (\r\n  <div className=\"data-container\">\r\n    <p className=\"data-container__line\">\r\n      Weight: {`${weight} ${getWeight(system)}`}\r\n    </p>\r\n    <p className=\"data-container__line\">\r\n      Heigh: {`${height} ${getHeight(system)}`}\r\n    </p>\r\n  </div>\r\n);\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Formik, FormikHelpers, Form, Field } from \"formik\";\nimport { InputWrapper } from \"../InputWrapper\";\nimport { ValuesTable } from \"../ValuesTable\";\nimport {\n  calculateBmi,\n  getMessage,\n  getTimeString,\n  updateVisitCounter,\n  getCount,\n  getHeight,\n  getWeight,\n} from \"../../heplers\";\nimport { FormVals, System } from \"./types\";\n\nconst initialValues = {\n  system: System.Metric,\n  name: \"\",\n  height: 0,\n  weight: 0,\n};\n\nexport const App = () => {\n  const [step, setStep] = useState(1);\n  const [message, setMessage] = useState(\"\");\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    setTime(Date.now());\n    updateVisitCounter();\n  }, []);\n\n  const handleNext = () => setStep((step) => step + 1);\n  const handleBack = () => setStep((step) => step - 1);\n  const handleSubmit = (vals: FormVals, actions: FormikHelpers<FormVals>) => {\n    const { name, height, weight, system } = vals;\n    actions.setSubmitting(false);\n    const bmi = calculateBmi(height, weight, system);\n    setMessage(getMessage(name, bmi));\n    setStep((step) => step + 1);\n  };\n  const logData = () => {\n    console.table({\n      \"Time elapsed\": getTimeString((Date.now() - time) / 1000),\n      Visits: getCount(),\n    });\n  };\n\n  const isFirstStep = step === 1;\n  const isSecondStep = step === 2;\n  const isThirdStep = step === 3;\n  const isFinished = step === 4;\n\n  // Galima praplėsti pasirinkimus pridedant lyties, amžiaus pasirinkimus\n  return (\n    <section className=\"section\">\n      <h1 className=\"title\">BMI App</h1>\n      <main className=\"container\">\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n          {({ values, handleChange }) => (\n            <>\n              <Form className=\"form\">\n                {isFirstStep && (\n                  <InputWrapper\n                    label=\"Name\"\n                    name=\"name\"\n                    type=\"text\"\n                    value={values.name}\n                    onChange={handleChange}\n                    onNext={handleNext}\n                  />\n                )}\n                {isSecondStep && (\n                  <InputWrapper\n                    label={`Weight (${getWeight(values.system)})`}\n                    name=\"weight\"\n                    type=\"number\"\n                    value={values.weight}\n                    onChange={handleChange}\n                    onNext={handleNext}\n                    onBack={handleBack}\n                  />\n                )}\n                {isThirdStep && (\n                  <InputWrapper\n                    label={`Height (${getHeight(values.system)})`}\n                    name=\"height\"\n                    type=\"number\"\n                    value={values.height}\n                    onBack={handleBack}\n                    onNext={logData}\n                    onChange={handleChange}\n                    hasSubmit={true}\n                  />\n                )}\n                {!isFirstStep && !isFinished && (\n                  <Field\n                    component=\"select\"\n                    id=\"system\"\n                    name=\"system\"\n                    disabled={isFinished ? true : false}\n                    className=\"select\"\n                  >\n                    <option value=\"metric\">metric</option>\n                    <option value=\"imperial\">imperial</option>\n                  </Field>\n                )}\n              </Form>\n              {isFinished && <p className=\"message\">{message}</p>}\n              <ValuesTable {...values} />\n            </>\n          )}\n        </Formik>\n      </main>\n    </section>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
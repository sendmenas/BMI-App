{"version":3,"sources":["components/App/types.ts","components/InputWrapper/InputWrapper.tsx","heplers/helpers.ts","components/ValuesTable/ValuesTable.tsx","components/App/App.tsx","index.tsx"],"names":["System","InputWrapper","name","type","label","value","hasSubmit","onChange","onNext","onBack","isValid","error","className","htmlFor","id","onClick","disabled","storageKey","storageValsKey","getWeight","system","Metric","getHeight","ValuesTable","weight","height","ValidationSchema","Yup","shape","min","max","required","positive","initialValues","App","useState","step","setStep","message","setMessage","time","setTime","data","window","localStorage","getItem","JSON","parse","getDataFromStorage","historicValues","useEffect","Date","now","count","updatedCount","parseInt","toString","setItem","updateVisitCounter","handleNext","handleBack","logData","seconds","console","table","toFixed","Visits","isFirstStep","isSecondStep","isThirdStep","isFinished","onSubmit","vals","actions","setSubmitting","bmi","Math","pow","calculateBmi","status","Map","get","visitor","length","getMessage","stringify","saveDataToStorage","validationSchema","values","handleChange","errors","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af3396cf.chunk.js","sourcesContent":["export enum System {\r\n  Metric = \"metric\",\r\n  Imperial = \"imperial\",\r\n}\r\n\r\nexport type FormVals = {\r\n  system: System;\r\n  name: string;\r\n  height: number;\r\n  weight: number;\r\n};\r\n","import { ChangeEvent } from \"react\";\r\nimport \"./InputWrapper.css\";\r\n\r\ntype Props = {\r\n  name: string;\r\n  type: \"number\" | \"text\";\r\n  label: string;\r\n  value: string | number;\r\n  hasSubmit?: boolean;\r\n  onChange: (e: ChangeEvent<any>) => void;\r\n  onNext?: (() => void) | ((vals: any) => void);\r\n  onBack?: () => void;\r\n  isValid: boolean;\r\n  error?: string;\r\n};\r\n\r\nexport const InputWrapper: React.FC<Props> = ({\r\n  name,\r\n  type,\r\n  label,\r\n  value,\r\n  hasSubmit = false,\r\n  onChange,\r\n  onNext,\r\n  onBack,\r\n  isValid,\r\n  error,\r\n}) => (\r\n  <div className=\"input-wrapper\">\r\n    <label htmlFor={name}>{label}</label>\r\n    <input\r\n      className=\"input-wrapper__input\"\r\n      id={name}\r\n      type={type}\r\n      name={name}\r\n      onChange={onChange}\r\n      value={value}\r\n    />\r\n    <div className=\"cta-block\">\r\n      {onBack && (\r\n        <button onClick={onBack} type=\"button\" className=\"cta-block__back\">\r\n          Back\r\n        </button>\r\n      )}\r\n      {onNext && (\r\n        <button\r\n          onClick={onNext}\r\n          type={hasSubmit ? \"submit\" : \"button\"}\r\n          className=\"cta-block__next\"\r\n          disabled={isValid ? false : true}\r\n        >\r\n          Next\r\n        </button>\r\n      )}\r\n    </div>\r\n    {error && <p className=\"errorMessage\">{error}</p>}\r\n  </div>\r\n);\r\n","import { FormVals, System, initialValues } from \"../components/App\";\r\n\r\nconst storageKey = \"count\";\r\nconst storageValsKey = \"vals\";\r\n\r\nexport const calculateBmi = (\r\n  height: number,\r\n  weight: number,\r\n  system: System = System.Metric\r\n): number => {\r\n  if (system === System.Metric) {\r\n    return (weight / Math.pow(height / 100, 2)) | 0;\r\n  }\r\n  return ((weight * 703) / Math.pow(height, 2)) | 0;\r\n};\r\n\r\nexport const getMessage = (name: string, bmi: number): string => {\r\n  const statusMap = new Map([\r\n    [bmi < 18.5, \"Underweight\"],\r\n    [bmi >= 18.5 && bmi <= 24.9, \"Normal weight\"],\r\n    [bmi >= 25.0 && bmi <= 29.9, \"Pre-obesity\"],\r\n    [bmi >= 30.0 && bmi <= 34.9, \"Obesity class I\"],\r\n    [bmi >= 35.0 && bmi <= 39.9, \"Obesity class II\"],\r\n    [bmi > 40, \"Obesity class III\"],\r\n  ]);\r\n  const status = statusMap.get(true);\r\n  const visitor = name.length > 0 ? name : \"Stranger\";\r\n\r\n  return `${visitor}, your BMI is ${bmi.toFixed(2)} - ${status}`;\r\n};\r\n\r\nexport const getTimeString = (seconds: number): string =>\r\n  seconds <= 60\r\n    ? `${seconds.toFixed()}s`\r\n    : `${(seconds / 60).toFixed()}min ${(seconds % 60).toFixed()}s`;\r\n\r\nexport const updateVisitCounter = () => {\r\n  const count = window.localStorage.getItem(storageKey);\r\n  if (!count) {\r\n    window.localStorage.setItem(storageKey, \"1\");\r\n    return;\r\n  }\r\n  const updatedCount = (parseInt(count) + 1).toString();\r\n  window.localStorage.setItem(storageKey, updatedCount);\r\n};\r\n\r\nexport const getCount = (): string | null =>\r\n  window.localStorage.getItem(storageKey);\r\n\r\nexport const getWeight = (system: System): string =>\r\n  system === System.Metric ? \"kg\" : \"lbs\";\r\n\r\nexport const getHeight = (system: System) =>\r\n  system === System.Metric ? \"cm\" : \"inches\";\r\n\r\nexport const saveDataToStorage = (vals: FormVals): void => {\r\n  window.localStorage.setItem(storageValsKey, JSON.stringify(vals));\r\n};\r\n\r\nexport const getDataFromStorage = (): FormVals => {\r\n  const data = window.localStorage.getItem(storageValsKey);\r\n  if (data) {\r\n    return JSON.parse(data);\r\n  }\r\n  return initialValues;\r\n};\r\n","import { getHeight, getWeight } from \"../../heplers\";\r\nimport { FormVals } from \"../App\";\r\nimport \"./ValuesTable.css\";\r\n\r\nexport const ValuesTable: React.FC<FormVals> = ({ weight, height, system }) => (\r\n  <div className=\"data-container\">\r\n    <p className=\"data-container__line\">\r\n      Weight: {`${weight} ${getWeight(system)}`}\r\n    </p>\r\n    <p className=\"data-container__line\">\r\n      Heigh: {`${height} ${getHeight(system)}`}\r\n    </p>\r\n  </div>\r\n);\r\n","import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Formik, FormikHelpers, Form, Field } from \"formik\";\r\nimport { InputWrapper } from \"../InputWrapper\";\r\nimport { ValuesTable } from \"../ValuesTable\";\r\nimport {\r\n  calculateBmi,\r\n  getMessage,\r\n  getTimeString,\r\n  updateVisitCounter,\r\n  getCount,\r\n  getHeight,\r\n  getWeight,\r\n  saveDataToStorage,\r\n  getDataFromStorage,\r\n} from \"../../heplers\";\r\nimport { FormVals, System } from \"./types\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Name is required\"),\r\n  height: Yup.number()\r\n    .positive(\"Can not be negative\")\r\n    .required(\"Height is required\"),\r\n  weight: Yup.number()\r\n    .positive(\"Can not be negative\")\r\n    .required(\"Weight is required\"),\r\n});\r\n\r\nexport const initialValues = {\r\n  system: System.Metric,\r\n  name: \"\",\r\n  height: 0,\r\n  weight: 0,\r\n};\r\n\r\nexport const App = () => {\r\n  const [step, setStep] = useState(1);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [time, setTime] = useState(0);\r\n  const [historicValues, setHistoricValues] = useState(() =>\r\n    getDataFromStorage()\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTime(Date.now());\r\n    updateVisitCounter();\r\n  }, []);\r\n\r\n  const handleNext = () => setStep((step) => step + 1);\r\n  const handleBack = () => setStep((step) => step - 1);\r\n  const handleSubmit = (vals: FormVals, actions: FormikHelpers<FormVals>) => {\r\n    const { name, height, weight, system } = vals;\r\n    actions.setSubmitting(false);\r\n    const bmi = calculateBmi(height, weight, system);\r\n    setMessage(getMessage(name, bmi));\r\n    setStep((step) => step + 1);\r\n    saveDataToStorage(vals);\r\n  };\r\n  const logData = () => {\r\n    console.table({\r\n      \"Time elapsed\": getTimeString((Date.now() - time) / 1000),\r\n      Visits: getCount(),\r\n    });\r\n  };\r\n\r\n  const isFirstStep = step === 1;\r\n  const isSecondStep = step === 2;\r\n  const isThirdStep = step === 3;\r\n  const isFinished = step === 4;\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <h1 className=\"title\">BMI App</h1>\r\n      <main className=\"container\">\r\n        <Formik\r\n          initialValues={historicValues}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={ValidationSchema}\r\n        >\r\n          {({ values, handleChange, errors }) => (\r\n            <>\r\n              <ValuesTable {...values} />\r\n              <Form className=\"form\">\r\n                {isFirstStep && (\r\n                  <InputWrapper\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    value={values.name}\r\n                    onChange={handleChange}\r\n                    onNext={handleNext}\r\n                    isValid={!errors.name}\r\n                    error={errors.name}\r\n                  />\r\n                )}\r\n                {isSecondStep && (\r\n                  <InputWrapper\r\n                    label={`Weight (${getWeight(values.system)})`}\r\n                    name=\"weight\"\r\n                    type=\"number\"\r\n                    value={values.weight}\r\n                    onChange={handleChange}\r\n                    onNext={handleNext}\r\n                    onBack={handleBack}\r\n                    isValid={!errors.weight}\r\n                    error={errors.weight}\r\n                  />\r\n                )}\r\n                {isThirdStep && (\r\n                  <InputWrapper\r\n                    label={`Height (${getHeight(values.system)})`}\r\n                    name=\"height\"\r\n                    type=\"number\"\r\n                    value={values.height}\r\n                    onBack={handleBack}\r\n                    onNext={logData}\r\n                    onChange={handleChange}\r\n                    hasSubmit={true}\r\n                    isValid={!errors.height}\r\n                    error={errors.height}\r\n                  />\r\n                )}\r\n                {!isFirstStep && !isFinished && (\r\n                  <Field\r\n                    component=\"select\"\r\n                    id=\"system\"\r\n                    name=\"system\"\r\n                    disabled={isFinished ? true : false}\r\n                    className=\"select\"\r\n                  >\r\n                    <option value=\"metric\">metric</option>\r\n                    <option value=\"imperial\">imperial</option>\r\n                  </Field>\r\n                )}\r\n              </Form>\r\n              {isFinished && <p className=\"message\">{message}</p>}\r\n            </>\r\n          )}\r\n        </Formik>\r\n      </main>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}